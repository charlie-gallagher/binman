# BINMAN MAKEFILE - LINUX
# Note: tabs not spaces. E.g. if in vim, check your tab expand:
# 	:set expandtab?		=> noexpandtab

ifndef INSTALL_ROOT
INSTALL_ROOT := /usr/local
endif


TARGET  := binman  # Final target name

INCDIR 	:= inc
SRCDIR	:= src
OBJDIR 	:= obj
CC 		:= gcc -c
LD		:= gcc -o
CFLAGS	:= -I$(INCDIR) -Wall -g3 -DINSTALL_ROOT='$(INSTALL_ROOT)'
LDFLAGS	:= -g3




# Overwrite implicit rule for object files
# A little dangerous because it always uses the first prerequisite
%.o: %.c
	$(CC) $(CFLAGS) -o $(OBJDIR)/$@ $<

# Set up search paths for particular extensions
vpath %.o $(OBJDIR):.

vpath %.c $(SRCDIR):.

vpath %.h $(INCDIR):.


# Quickref
# $^	prereq list
# $@	target
# $<	first prereq
# $?	out of date dependencies
# $+	all dependencies
# $|	'order only' prereqs

all: $(TARGET) # Default rule runs when TARGET is out of date

$(TARGET) : bin_arg_parse.o bin_error.o bin_flow.o binman.o bin_ops.o bin_print.o
	$(LD) $(LDFLAGS) -o $@ $(OBJDIR)/*

bin_arg_parse.o: bin_arg_parse.c bin_arg_parse.h bin_error.h

bin_error.o: bin_error.c bin_error.h

bin_flow.o: bin_flow.c bin_print.h bin_ops.h bin_arg_parse.h bin_flow.h

binman.o: binman.c bin_arg_parse.h bin_flow.h bin_error.h bin_print.h

bin_ops.o: bin_ops.c bin_ops.h bin_print.h bin_error.h

bin_print.o: bin_print.c bin_ops.h bin_print.h bin_error.h stringize.h

.PHONY : clean # in case there is ever a file called 'clean'
# remove object files, keep going if error
clean:
	-rm -f $(OBJDIR)/*.o
	-rm -f binman

.PHONY : install
install:
	echo "Installing into $(INSTALL_ROOT)..."
	mkdir -p $(INSTALL_ROOT)/bin
	mkdir -p $(INSTALL_ROOT)/share/binman
	cp binman $(INSTALL_ROOT)/bin/binman
	cp doc/help.txt $(INSTALL_ROOT)/share/binman/help.txt

.PHONY : uninstall
uninstall:
	echo "Uninstalling binman from $(INSTALL_ROOT).."
	rm -f $(INSTALL_ROOT)/bin/binman
	rm -rf $(INSTALL_ROOT)/share/binman/

.PHONY : test
test:
	echo "$(OBJS)"

